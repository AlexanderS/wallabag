imports:
    - { resource: services_rabbit.yml }
    - { resource: services_redis.yml }
    - { resource: parameters_addons.yml }

parameters:
    lexik_form_filter.get_filter.doctrine_orm.class: Wallabag\CoreBundle\Event\Subscriber\CustomDoctrineORMSubscriber

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: true

    Twig_Extensions_Extension_Text:
        class: Twig_Extensions_Extension_Text

    Wallabag\CoreBundle\Twig\WallabagExtension:
        public: false
        arguments:
            $lifeTime: "%wallabag_core.cache_lifetime%"
            $rootDir: "%kernel.root_dir%"

    MatomoTwigExtension\MatomoTwigExtension:
        public: false

    Wallabag\CoreBundle\Event\Listener\LocaleListener:
        arguments:
            $defaultLocale: "%kernel.default_locale%"

    Wallabag\CoreBundle\Event\Listener\UserLocaleListener:
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onInteractiveLogin }

    craue_config_cache_provider:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        public: false
        arguments:
            $namespace: 'craue_config'
            $defaultLifetime: 0
            $directory: '%kernel.cache_dir%'

    Wallabag\CoreBundle\Helper\DetectActiveTheme:
        arguments:
            $defaultTheme: "%wallabag_core.theme%"

    # custom form type
    Wallabag\CoreBundle\Form\Type\ConfigType:
        arguments:
            $themes: "%liip_theme.themes%"
            $languages: "%wallabag_core.languages%"

    Wallabag\CoreBundle\Form\Type\EntryFilterType: ~

    Wallabag\CoreBundle\ParamConverter\UsernameFeedTokenConverter:
        tags:
            - { name: request.param_converter, converter: username_feed_token_converter }

    Wallabag\CoreBundle\Event\Subscriber\TablePrefixSubscriber:
        arguments:
            $prefix: "%database_table_prefix%"
        tags:
            - { name: doctrine.event_subscriber }

    Graby\Graby:
        arguments:
            $config:
                error_message: '%wallabag_core.fetching_error_message%'
                error_message_title: '%wallabag_core.fetching_error_message_title%'
        calls:
            - [ setLogger, [ "@logger" ] ]
        tags:
            - { name: monolog.logger, channel: graby }

    Graby\SiteConfig\ConfigBuilder:
        arguments:
            $config: {}

    wallabag_core.http_client:
        alias: 'httplug.client.wallabag_core'

    Wallabag\CoreBundle\GuzzleSiteAuthenticator\GrabySiteConfigBuilder:
        tags:
            - { name: monolog.logger, channel: graby }

    # service alias override
    bd_guzzle_site_authenticator.site_config_builder:
        alias: Wallabag\CoreBundle\GuzzleSiteAuthenticator\GrabySiteConfigBuilder

    Wallabag\CoreBundle\Helper\HttpClientFactory:
        arguments:
            $restrictedAccess: '@=service(''craue_config'').get(''restricted_access'')'
        calls:
            - ["addSubscriber", ["@bd_guzzle_site_authenticator.authenticator_subscriber"]]

    Wallabag\CoreBundle\Helper\FileCookieJar:
        arguments:
            $cookieFile: "%kernel.cache_dir%/cookiejar.json"

    Wallabag\CoreBundle\Helper\ContentProxy:
        arguments:
            $fetchingErrorMessage: '%wallabag_core.fetching_error_message%'
            $storeArticleHeaders: '@=service(''craue_config'').get(''store_article_headers'')'

    Wallabag\CoreBundle\Helper\TagsAssigner: ~

    Wallabag\CoreBundle\Helper\RuleBasedTagger: ~

    Wallabag\CoreBundle\Helper\RuleBasedIgnoreOriginProcessor: ~

    # repository as a service
    Wallabag\CoreBundle\Repository\EntryRepository:
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - 'Wallabag\CoreBundle\Entity\Entry'

    Wallabag\CoreBundle\Repository\TagRepository:
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - 'Wallabag\CoreBundle\Entity\Tag'

    Wallabag\CoreBundle\Repository\SiteCredentialRepository:
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - 'Wallabag\CoreBundle\Entity\SiteCredential'
        calls:
            - [ setCrypto, [ '@Wallabag\CoreBundle\Helper\CryptoProxy' ] ]

    Wallabag\CoreBundle\Repository\IgnoreOriginInstanceRuleRepository:
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - 'Wallabag\CoreBundle\Entity\IgnoreOriginInstanceRule'

    Wallabag\CoreBundle\Helper\EntriesExport:
        arguments:
            $wallabagUrl: '%domain_name%'
            $logoPath: web/img/appicon/apple-touch-icon-152.png

    Wallabag\CoreBundle\Operator\PHP\Matches:
        tags:
            - { name: rulerz.operator, target: native, operator: matches }

    Wallabag\CoreBundle\Operator\Doctrine\Matches:
        tags:
            - { name: rulerz.operator, target: doctrine, operator: matches, inline: true }

    Wallabag\CoreBundle\Operator\PHP\NotMatches:
        tags:
            - { name: rulerz.operator, target: native, operator: notmatches }

    Wallabag\CoreBundle\Operator\Doctrine\NotMatches:
        tags:
            - { name: rulerz.operator, target: doctrine, operator: notmatches, inline: true }

    Wallabag\CoreBundle\Operator\PHP\PatternMatches:
        tags:
            - { name: rulerz.operator, target: native, operator: "~" }

    Wallabag\CoreBundle\Helper\Redirect: ~

    Wallabag\CoreBundle\Helper\PreparePagerForEntries: ~

    Predis\Client:
        arguments:
            $parameters:
                scheme: '%redis_scheme%'
                host: '%redis_host%'
                port: '%redis_port%'
                path: '%redis_path%'
                password: '%redis_password%'

    Wallabag\CoreBundle\Controller\ExceptionController:
        arguments:
            $debug: '%kernel.debug%'

    Wallabag\CoreBundle\Event\Subscriber\SQLiteCascadeDeleteSubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    Wallabag\CoreBundle\Event\Subscriber\DownloadImagesSubscriber:
        arguments:
            $enabled: '@=service(''craue_config'').get(''download_images_enabled'')'

    Wallabag\CoreBundle\Helper\DownloadImages:
        arguments:
            $baseFolder: "%kernel.project_dir%/web/assets/images"
            $wallabagUrl: '%domain_name%'

    wallabag_core.entry.download_images.client:
        alias: 'httplug.client.wallabag_core.entry.download_images'

    Wallabag\CoreBundle\Helper\CryptoProxy:
        arguments:
            $encryptionKeyPath: "%wallabag_core.site_credentials.encryption_key_path%"

    Wallabag\CoreBundle\Command\:
        resource: ../../src/Wallabag/CoreBundle/Command/*

    Wallabag\UserBundle\Mailer\AuthCodeMailer:
        arguments:
            $senderEmail: "%scheb_two_factor.email.sender_email%"
            $senderName: "%scheb_two_factor.email.sender_name%"
            $supportUrl: '@=service(''craue_config'').get(''wallabag_support_url'')'
            $wallabagUrl: '%domain_name%'

    Wallabag\UserBundle\EventListener\RegistrationListener:
        arguments:
            $registrationEnabled: '%fosuser_registration%'

    Wallabag\UserBundle\EventListener\PasswordResettingListener: ~

    Wallabag\UserBundle\Repository\UserRepository:
        factory: [ "@doctrine.orm.default_entity_manager", getRepository ]
        arguments:
            - 'Wallabag\UserBundle\Entity\User'

    Wallabag\UserBundle\EventListener\CreateConfigListener:
        arguments:
            $theme: "%wallabag_core.theme%"
            $itemsOnPage: "%wallabag_core.items_on_page%"
            $feedLimit: "%wallabag_core.feed_limit%"
            $language: "%wallabag_core.language%"
            $readingSpeed: "%wallabag_core.reading_speed%"
            $actionMarkAsRead: "%wallabag_core.action_mark_as_read%"
            $listMode: "%wallabag_core.list_mode%"

    Wallabag\UserBundle\EventListener\AuthenticationFailureListener:
        tags:
            - { name: kernel.event_listener, event: security.authentication.failure, method: onAuthenticationFailure }

    Wallabag\ImportBundle\Import\ImportChain: ~

    wallabag_import.pocket.client:
        alias: 'httplug.client.wallabag_import.pocket.client'

    Wallabag\ImportBundle\Import\PocketImport:
        calls:
            - [ setClient, [ "@wallabag_import.pocket.client" ] ]
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: pocket }

    Wallabag\ImportBundle\Import\WallabagV1Import:
        arguments:
            $fetchingErrorMessageTitle: "%wallabag_core.fetching_error_message_title%"
            $fetchingErrorMessage: "%wallabag_core.fetching_error_message%"
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: wallabag_v1 }

    Wallabag\ImportBundle\Import\WallabagV2Import:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: wallabag_v2 }

    Wallabag\ImportBundle\Import\ElcuratorImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: elcurator }

    Wallabag\ImportBundle\Import\ReadabilityImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: readability }

    Wallabag\ImportBundle\Import\InstapaperImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: instapaper }

    Wallabag\ImportBundle\Import\PinboardImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: pinboard }

    Wallabag\ImportBundle\Import\DeliciousImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: delicious }

    Wallabag\ImportBundle\Import\FirefoxImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: firefox }

    Wallabag\ImportBundle\Import\ChromeImport:
        calls:
            - [ setLogger, [ "@logger" ]]
        tags:
            -  { name: wallabag_import.import, alias: chrome }

    Wallabag\ImportBundle\Command\:
        resource: ../../src/Wallabag/ImportBundle/Command/*
